#!/usr/bin/env ruby

require 'json'
require 'yaml'

ROLE_NAME = 'org-mattbooks-rentchecks'

config = YAML.load_file("config/settings.yaml")

bucket = config['bucket']
mailer_function_name = config['mailer_function_name']
status_function_name = config['status_function_name']

def get_role
  JSON.parse(`aws iam get-role --role-name #{ROLE_NAME}`)
end

role = nil

begin
  puts "Checking for existing role"
  role = get_role

  puts "Checking for appropriate service"
  service = role.dig('Role', 'AssumeRolePolicyDocument', 'Statement')&.first&.dig('Principal', 'Service')

  if service != 'lambda.amazonaws.com'
    STDERR.puts "Detected unexpected service: #{service}, expected lambda.amazonaws.com for role: #{ROLE_NAME}"
    STDERR.puts "Please fix this yourself (eg, delete it)"
    exit 1
  end
rescue JSON::ParserError
  puts "Didn't find role, creating"
  policy_doc = '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":["lambda.amazonaws.com"]},"Action":["sts:AssumeRole"]}]}'
  role = `aws iam create-role --role-name=org-mattbooks-rentchecks --assume-role-policy-document='#{policy_doc}'`
end

puts "Attaching lambda exec policy"
`aws iam attach-role-policy --role-name #{ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole`
`aws iam attach-role-policy --role-name #{ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess`

role_arn = role.dig('Role', 'Arn')

puts "Creating check mailer function"
`aws lambda create-function \
  --function-name #{mailer_function_name} \
  --runtime java8 \
  --role #{role_arn} \
  --handler org.mattbooks.rentchecks.lob.LobCheckMailer \
  --code S3Bucket=#{bucket},S3Key=rentchecks.jar \
  --description "Function that mails a rent check using Lob" \
  --memory-size 256 \
  --timeout 20 \
  --publish`

puts "Creating check status function"
`aws lambda create-function \
  --function-name #{status_function_name} \
  --runtime java8 \
  --role #{role_arn} \
  --handler org.mattbooks.rentchecks.email.Emailer \
  --code S3Bucket=#{bucket},S3Key=rentchecks.jar \
  --description "Function that sends a status update for rent checks" \
  --memory-size 256 \
  --timeout 20 \
  --publish`

`aws lambda update-function-configuration --environment 'Variables={LOB_API_KEY=FILL_ME_IN,FROM_ADDRESS_TOKEN=FILL_ME_IN,TO_ADDRESS_TOKEN=FILL_ME_IN,BANK_ACCOUNT_TOKEN=FILL_ME_IN,RENT_AMOUNT=FILL_ME_IN}' --function-name #{mailer_function_name}`

`aws lambda update-function-configuration --environment 'Variables={EMAIL=FILL_ME_IN,FROM_EMAIL_PASSWORD=FILL_ME_IN,TO_EMAIL=FILL_ME_IN}' --function-name #{status_function_name}`
